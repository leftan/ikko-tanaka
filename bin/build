#!/usr/bin/env node

var fs = require('fs');
var path = require('path');
var less = require('less');
var compose = require('fcompose');
var find = require('find');


var join = path.join;
var dir = {
  src:      join(__dirname, '../src'),
  template: join(__dirname, '../template'),
  build:    join(__dirname, '../release')
};

var isError = function(obj) {
  return Object.prototype.toString.call(obj) === '[object Error]';
}; 

var skipFirstParam = function(fn, context) {
  return function() {
    var e = arguments[0];
    if (isError(e)) {
      console.error(e.message);
      [].push.call(arguments, '');
    }
    fn.apply(context, [].slice.call(arguments, 1));
  }
};

var read = function(file, fn) {
  fs.stat(file, function(err, stat) {
    if (!err && stat.isFile()) {
      fs.readFile(file, 'utf-8', skipFirstParam(fn));
    } else {
      fn(file);
    }
  });
};

var getBody = function(file, fn) {
  var regBody = /<body.*>(\s*(.|\n)*\s*)<\/body>/g; 
  read(file, function(html) {
    html.replace(regBody, skipFirstParam(fn));
  });
};

var less2css = function(file, fn) {
  read(file, function(content) {
    less.render(content, { paths: [path.dirname(file)] }, skipFirstParam(fn));
  });
};


var styles = [];
var htmls = [];

find
  .eachdir(/^[^_]/, dir.src, function(src) {
    less2css(join(src, 'index.less'), function(css) {
      styles.push(css);    
    });
    getBody(join(src, 'index.html'), function(html) { 
      htmls.push('<section class="page">' + html + '</section>');
    });
  })
  .end(function() {
    compose(
      join(dir.template, 'index.less'),
      join(dir.build, 'index.css'),
      function(content, next) {
        less2css(join(dir.template, 'index.less'), function(css) {
          next(css + styles.join('\n'));
        });
      });
    compose(
      join(dir.template, 'index.html'),
      join(dir.build, 'index.html'),
      function(content, next) {
        next(
          content.toString()
            .replace(/\.less/g, '.css')
            .replace(/{{\s*content\s*}}/g, htmls.join('\n'))        
        );
      }); 
  });

